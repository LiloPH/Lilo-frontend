/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardUserImport } from './routes/dashboard/user'
import { Route as DashboardRoutesImport } from './routes/dashboard/routes'
import { Route as DashboardMapImport } from './routes/dashboard/map'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUserRoute = DashboardUserImport.update({
  id: '/dashboard/user',
  path: '/dashboard/user',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoutesRoute = DashboardRoutesImport.update({
  id: '/dashboard/routes',
  path: '/dashboard/routes',
  getParentRoute: () => rootRoute,
} as any)

const DashboardMapRoute = DashboardMapImport.update({
  id: '/dashboard/map',
  path: '/dashboard/map',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/map': {
      id: '/dashboard/map'
      path: '/dashboard/map'
      fullPath: '/dashboard/map'
      preLoaderRoute: typeof DashboardMapImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/routes': {
      id: '/dashboard/routes'
      path: '/dashboard/routes'
      fullPath: '/dashboard/routes'
      preLoaderRoute: typeof DashboardRoutesImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/user': {
      id: '/dashboard/user'
      path: '/dashboard/user'
      fullPath: '/dashboard/user'
      preLoaderRoute: typeof DashboardUserImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof DashboardRoute
  '/dashboard/map': typeof DashboardMapRoute
  '/dashboard/routes': typeof DashboardRoutesRoute
  '/dashboard/user': typeof DashboardUserRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof DashboardRoute
  '/dashboard/map': typeof DashboardMapRoute
  '/dashboard/routes': typeof DashboardRoutesRoute
  '/dashboard/user': typeof DashboardUserRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_dashboard': typeof DashboardRoute
  '/dashboard/map': typeof DashboardMapRoute
  '/dashboard/routes': typeof DashboardRoutesRoute
  '/dashboard/user': typeof DashboardUserRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dashboard/map'
    | '/dashboard/routes'
    | '/dashboard/user'
    | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/dashboard/map'
    | '/dashboard/routes'
    | '/dashboard/user'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_dashboard'
    | '/dashboard/map'
    | '/dashboard/routes'
    | '/dashboard/user'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  DashboardMapRoute: typeof DashboardMapRoute
  DashboardRoutesRoute: typeof DashboardRoutesRoute
  DashboardUserRoute: typeof DashboardUserRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  DashboardMapRoute: DashboardMapRoute,
  DashboardRoutesRoute: DashboardRoutesRoute,
  DashboardUserRoute: DashboardUserRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_dashboard",
        "/dashboard/map",
        "/dashboard/routes",
        "/dashboard/user",
        "/dashboard/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx"
    },
    "/dashboard/map": {
      "filePath": "dashboard/map.tsx"
    },
    "/dashboard/routes": {
      "filePath": "dashboard/routes.tsx"
    },
    "/dashboard/user": {
      "filePath": "dashboard/user.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
